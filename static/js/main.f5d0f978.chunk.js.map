{"version":3,"sources":["assets/IcarusTaxGroupLogo.png","components/LoginPage.js","components/Header.js","components/HomePage.js","components/TaxFilingPage.js","components/TaxComfortPage.js","components/W2UploadPage.js","components/Fill1040Page.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","LoginPage","navigate","useNavigate","email","setEmail","useState","password","setPassword","emailError","setEmailError","passwordError","setPasswordError","React","createElement","className","src","logo","alt","onSubmit","event","preventDefault","isValid","test","validateEmail","length","validatePassword","state","type","placeholder","value","onChange","e","target","href","Header","_location$state","userEmail","useLocation","Link","to","HomePage","location","animateRunner","setAnimateRunner","Fragment","onClick","handleGetStarted","setTimeout","TaxFilingPage","selectedOptions","setSelectedOptions","general","employment","family","housing","investments","handleCheckboxChange","category","option","prevState","updatedCategory","includes","filter","item","[object Object]","checked","TaxComfortPage","requiredForms","setRequiredForms","loading","setLoading","error","setError","async","response","fetch","method","headers","Content-Type","Authorization","body","JSON","stringify","model","messages","role","content","max_tokens","formsList","json","choices","message","split","map","form","name","description","trim","console","fetchRequiredForms","aria-label","log","handleHelpClick","index","key","rel","W2UploadPage","selectedFile","setSelectedFile","uploadStatus","setUploadStatus","structuredData","setStructuredData","accept","file","files","extractedText","result","Tesseract","recognize","logger","m","data","text","performOCR","gptResult","processWithOpenAI","disabled","handleNext","Fill1040Page","_ref","downloadLink","setDownloadLink","fill1040Form","useCallback","formUrl","formPdfBytes","then","res","arrayBuffer","pdfDoc","PDFDocument","load","getForm","employeeName","ssn","getTextField","setText","slice","join","pdfBytes","save","blob","Blob","link","URL","createObjectURL","useEffect","download","revokeObjectURL","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f5d0f978.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IcarusTaxGroupLogo.66549c56.png\";","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './LoginPage.css';\nimport logo from '../assets/IcarusTaxGroupLogo.png'; // Make sure the logo is in the assets folder\n\nconst LoginPage = () => {\n    const navigate = useNavigate();\n    \n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [emailError, setEmailError] = useState('');\n    const [passwordError, setPasswordError] = useState('');\n\n    // Email validation function (Gmail format)\n    const validateEmail = (email) => {\n        const gmailPattern = /^[a-zA-Z0-9._%+-]+@gmail\\.com$/;\n        return gmailPattern.test(email);\n    };\n\n    // Password validation function (at least 8 characters)\n    const validatePassword = (password) => {\n        return password.length >= 8;\n    };\n\n    const handleLogin = (event) => {\n        event.preventDefault();\n        let isValid = true;\n\n        // Reset previous errors\n        setEmailError('');\n        setPasswordError('');\n\n        // Validate email\n        if (!validateEmail(email)) {\n            setEmailError('Please enter a valid Gmail address (e.g., user@gmail.com).');\n            isValid = false;\n        }\n\n        // Validate password\n        if (!validatePassword(password)) {\n            setPasswordError('Password must be at least 8 characters long.');\n            isValid = false;\n        }\n\n        // If validation passes, navigate to the home page\n        if (isValid) {\n            navigate('/home', { state: { email } });\n        }\n    };\n\n    return (\n        <div className=\"login-container\">\n            <div className=\"login-box\">\n                {/* Icarus logo and name */}\n                <div className=\"login-icon\">\n                    <img src={logo} alt=\"Icarus Logo\" className=\"icarus-logo\" />\n                    <h1 className=\"icarus-title\">Icarus Tax Group</h1>\n                </div>\n                {/* Login form */}\n                <form onSubmit={handleLogin}>\n                    <div className=\"form-group\">\n                        <input \n                            type=\"email\" \n                            placeholder=\"Email Address\" \n                            value={email} \n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                        {emailError && <div className=\"error-message\">{emailError}</div>}\n                    </div>\n                    <div className=\"form-group\">\n                        <input \n                            type=\"password\" \n                            placeholder=\"Password\" \n                            value={password} \n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                        {passwordError && <div className=\"error-message\">{passwordError}</div>}\n                    </div>\n                    <button type=\"submit\" className=\"login-button\">Login</button>\n                </form>\n                <div className=\"login-links\">\n                    <a href=\"/signup\">Signup</a>\n                    <a href=\"/forgot-password\">Forgot Password?</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default LoginPage;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport './Header.css';\nimport logo from '../assets/IcarusTaxGroupLogo.png'; // Ensure the logo path is correct\n\nconst Header = () => {\n    const location = useLocation();\n    const userEmail = location.state?.email || 'User'; // Get logged-in user email from state\n\n    return (\n        <header className=\"app-header\">\n            {/* Update the Link to navigate to /home and pass the email state */}\n            <Link to=\"/home\" state={{ email: userEmail }} className=\"logo-container\">\n                <img src={logo} alt=\"Icarus Tax Group Logo\" className=\"app-logo\" />\n                <h1 className=\"app-title\">Icarus Tax Group</h1>\n            </Link>\n        </header>\n    );\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './HomePage.css';\nimport Header from './Header';\n\nconst HomePage = () => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const userEmail = location.state?.email || 'User';\n    const [animateRunner, setAnimateRunner] = useState(false);\n\n    const handleGetStarted = () => {\n        setAnimateRunner(true); // Trigger runner animation\n        setTimeout(() => {\n            setAnimateRunner(false); // Reset runner animation\n            navigate('/tax-filing', { state: { email: userEmail } });\n        }, 1000); // Adjust delay to match animation duration\n    };\n\n    return (\n        <>\n            <Header />\n            <div className=\"home-container\">\n                <h2>Welcome, {userEmail}!</h2>\n                <p>Get started with your tax filing process by clicking the button below.</p>\n                <button\n                    className=\"get-started-button\"\n                    onClick={handleGetStarted}\n                >\n                    Get Started with Your Tax Filing\n                    <div className={`runner ${animateRunner ? 'run' : ''}`}>📁💼</div>\n                </button>\n            </div>\n        </>\n    );\n};\n\nexport default HomePage;\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './TaxFilingPage.css';\nimport Header from './Header';\n\nconst TaxFilingPage = () => {\n    const navigate = useNavigate();\n    const [selectedOptions, setSelectedOptions] = useState({\n        general: [],\n        employment: [],\n        family: [],\n        housing: [],\n        investments: [],\n    });\n\n    // Handle checkbox changes and update the state based on user selections\n    const handleCheckboxChange = (category, option) => {\n        setSelectedOptions((prevState) => {\n            const updatedCategory = prevState[category].includes(option)\n                ? prevState[category].filter((item) => item !== option)\n                : [...prevState[category], option];\n\n            return {\n                ...prevState,\n                [category]: updatedCategory,\n            };\n        });\n    };\n\n    // On form submission, navigate to the comfort page with the selected options as state\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        navigate('/comfort', { state: { selectedOptions } }); // Pass selected options to the next page\n    };\n\n    return (\n        <>\n            <Header /> {/* Consistent Header component */}\n            <div className=\"tax-filing-container\"> {/* Main container with similar styling as HomePage */}\n                <form className=\"tax-filing-form\" onSubmit={handleSubmit}>\n                    <h2>Do any of these apply?</h2>\n                    <p>This helps us customize your experience.</p>\n\n                    {/* Section for General options */}\n                    <section className=\"questionnaire-section\">\n                        <h3>General</h3>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('general', 'maximizeDeductions')}\n                                checked={selectedOptions.general.includes('maximizeDeductions')}\n                            />\n                            I want to maximize deductions and credits\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('general', 'charityDonation')}\n                                checked={selectedOptions.general.includes('charityDonation')}\n                            />\n                            I donated to charity\n                        </label>\n                    </section>\n\n                    {/* Section for Employment options */}\n                    <section className=\"questionnaire-section\">\n                        <h3>Employment</h3>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('employment', 'job')}\n                                checked={selectedOptions.employment.includes('job')}\n                            />\n                            I have a job (W-2)\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('employment', 'freelancer')}\n                                checked={selectedOptions.employment.includes('freelancer')}\n                            />\n                            I'm a freelancer/gig-worker\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('employment', 'selfEmployed')}\n                                checked={selectedOptions.employment.includes('selfEmployed')}\n                            />\n                            I'm self-employed\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('employment', 'businessOwner')}\n                                checked={selectedOptions.employment.includes('businessOwner')}\n                            />\n                            I own a business (S-corp, Partnership, or LLC)\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('employment', 'unemploymentIncome')}\n                                checked={selectedOptions.employment.includes('unemploymentIncome')}\n                            />\n                            I have unemployment income\n                        </label>\n                    </section>\n\n                    {/* Section for Family options */}\n                    <section className=\"questionnaire-section\">\n                        <h3>Family</h3>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('family', 'childrenDependents')}\n                                checked={selectedOptions.family.includes('childrenDependents')}\n                            />\n                            I have children/dependents\n                        </label>\n                    </section>\n\n                    {/* Section for Housing options */}\n                    <section className=\"questionnaire-section\">\n                        <h3>Housing</h3>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('housing', 'ownHome')}\n                                checked={selectedOptions.housing.includes('ownHome')}\n                            />\n                            I own a home\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('housing', 'paidRent')}\n                                checked={selectedOptions.housing.includes('paidRent')}\n                            />\n                            I paid rent\n                        </label>\n                    </section>\n\n                    {/* Section for Investments options */}\n                    <section className=\"questionnaire-section\">\n                        <h3>Investments</h3>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('investments', 'rentalProperty')}\n                                checked={selectedOptions.investments.includes('rentalProperty')}\n                            />\n                            I own a rental property\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => handleCheckboxChange('investments', 'stockCrypto')}\n                                checked={selectedOptions.investments.includes('stockCrypto')}\n                            />\n                            I sold stock or crypto\n                        </label>\n                    </section>\n\n                    {/* Navigation buttons */}\n                    <div className=\"form-navigation\">\n                        <button type=\"button\" className=\"back-button\" onClick={() => navigate('/home')}>\n                            Back\n                        </button>\n                        <button type=\"submit\" className=\"next-button\">\n                            Next\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </>\n    );\n};\n\nexport default TaxFilingPage;\n","import React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './TaxComfortPage.css';\nimport Header from './Header';\n\nconst TaxComfortPage = () => {\n    const navigate = useNavigate();\n    const { state } = useLocation(); // Retrieve the state passed from TaxFilingPage\n    const selectedOptions = state ? state.selectedOptions : {}; // Access the selectedOptions\n\n    const [requiredForms, setRequiredForms] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    // Function to handle API call to OpenAI\n    const fetchRequiredForms = async () => {\n        setLoading(true);\n        setError('');\n        try {\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n                },\n                body: JSON.stringify({\n                    model: 'gpt-3.5-turbo',\n                    messages: [\n                        { role: 'system', content: 'You are a helpful assistant that provides IRS tax form recommendations based on selected tax options.' },\n                        { role: 'user', content: `Given the selected tax options: ${JSON.stringify(selectedOptions)}, which IRS tax forms are required? Please list the forms and a short description of each.` }\n                    ],\n                    max_tokens: 150,\n                }),\n            });\n\n            const data = await response.json();\n            const formsList = data.choices[0].message.content.split('\\n').map(form => {\n                const [name, description] = form.split(':');\n                return { name: name?.trim(), description: description?.trim() };\n            }).filter(form => form.name && form.description);\n\n            setRequiredForms(formsList);\n\n        } catch (error) {\n            console.error('Error fetching required forms:', error);\n            setError('Could not fetch forms. Please try again later.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Function to handle selection and initiate the API call\n    const handleComfortableClick = async () => {\n        await fetchRequiredForms();\n    };\n\n    // Function to navigate to the W-2 upload page\n    const handleHelpClick = () => {\n        navigate('/w2-upload');\n    };\n\n    return (\n        <div className=\"tax-comfort-page\">\n            <Header />\n\n            <div className=\"tax-comfort-container\">\n                <h2>How comfortable do you feel doing your own taxes?</h2>\n                <p>We'll show our expert help options and make a recommendation.</p>\n\n                <div className=\"comfort-options\">\n                    <div className=\"option-card\" onClick={handleComfortableClick}>\n                        <div className=\"icon\">\n                            <span role=\"img\" aria-label=\"business person\">👨‍💼</span>\n                        </div>\n                        <p>Comfortable on my own</p>\n                    </div>\n                    <div className=\"option-card\" onClick={() => console.log(\"Selected: Prefer to hand off to an expert\")}>\n                        <div className=\"icon\">\n                            <span role=\"img\" aria-label=\"woman business person\">👩‍💼</span>\n                        </div>\n                        <p>Want help when I need it</p>\n                    </div>\n                    <div className=\"option-card\" onClick={handleHelpClick}>\n                        <div className=\"icon\">\n                            <span role=\"img\" aria-label=\"expert\">🧑‍💼</span>\n                        </div>\n                        <p>Prefer to hand off to an expert</p>\n                    </div>\n                </div>\n\n                {loading ? (\n                    <div className=\"spinner\"></div> // Loading spinner\n                ) : error ? (\n                    <p className=\"error-message\">{error}</p> // Error message if API call fails\n                ) : requiredForms.length > 0 && (\n                    <div className=\"forms-list\">\n                        <h3>Required Tax Forms</h3>\n                        <ul>\n                            {requiredForms.map((form, index) => (\n                                <li key={index}>\n                                    <a href={`https://www.irs.gov/pub/irs-pdf/${form.name}.pdf`} target=\"_blank\" rel=\"noopener noreferrer\">\n                                        {form.name}\n                                    </a>\n                                    <p>{form.description}</p>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n\n                <button className=\"back-button\" onClick={() => navigate('/tax-filing')}>← Back</button>\n            </div>\n        </div>\n    );\n};\n\nexport default TaxComfortPage;\n","import React, { useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport './W2UploadPage.css';\n\nconst W2UploadPage = () => {\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [uploadStatus, setUploadStatus] = useState('');\n    const [loading, setLoading] = useState(false); // Loading state for OCR and GPT process\n    const [structuredData, setStructuredData] = useState(''); // State to hold GPT response\n    const navigate = useNavigate();\n\n    // Handle file change for W-2 image upload\n    const handleFileChange = (event) => {\n        const file = event.target.files[0];\n        if (file && (file.type === 'image/jpeg' || file.type === 'image/png')) {\n            setSelectedFile(file);\n            setUploadStatus('');\n        } else {\n            setUploadStatus('Please select a valid image file (JPG or PNG).');\n            setSelectedFile(null);\n        }\n    };\n\n    // Perform OCR on the uploaded W-2 image file\n    const performOCR = async (file) => {\n        setLoading(true);\n        try {\n            const result = await Tesseract.recognize(file, 'eng', {\n                logger: (m) => console.log(m), // Log OCR progress\n            });\n\n            console.log('OCR Result:', result.data.text);\n            setUploadStatus('OCR completed successfully');\n            return result.data.text; // Return the extracted text\n\n        } catch (error) {\n            console.error('Error performing OCR:', error);\n            setUploadStatus('Error during OCR processing');\n            return null;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Process data using OpenAI\n    const processWithOpenAI = async (extractedText) => {\n        try {\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n                },\n                body: JSON.stringify({\n                    model: 'gpt-3.5-turbo',\n                    messages: [\n                        { role: 'system', content: 'You are a tax expert.' },\n                        { role: 'user', content: `Parse the following W-2 data into 1040 form fields: ${extractedText}` }\n                    ],\n                    max_tokens: 1000,\n                }),\n            });\n\n            const data = await response.json();\n            return data.choices[0].message.content; // Return GPT's response content\n        } catch (error) {\n            console.error('Error with OpenAI:', error);\n            setUploadStatus('Error processing with GPT.');\n            return 'Error processing data with GPT';\n        }\n    };\n\n    // Handle file upload and OCR execution\n    const handleFileUpload = async () => {\n        if (!selectedFile) {\n            setUploadStatus('No file selected');\n            return;\n        }\n\n        // Perform OCR and process with OpenAI\n        const extractedText = await performOCR(selectedFile);\n        if (extractedText) {\n            const gptResult = await processWithOpenAI(extractedText);\n            setStructuredData(gptResult);\n            setUploadStatus('Processing completed successfully.');\n        }\n    };\n\n    // Navigate to the 1040 form page after processing\n    const handleNext = () => {\n        navigate('/fill-1040', { state: { structuredData } });\n    };\n\n    return (\n        <div className=\"w2-upload-page\">\n            <Header />\n            <div className=\"upload-container\">\n                <h2>Upload your W-2 Form Image</h2>\n                <input type=\"file\" accept=\"image/jpeg, image/png\" onChange={handleFileChange} />\n                <button onClick={handleFileUpload} disabled={loading}>\n                    {loading ? 'Processing...' : 'Upload and Extract Data'}\n                </button>\n\n                <p>{uploadStatus}</p>\n\n                {/* Display structured data from GPT */}\n                {structuredData && (\n                    <div>\n                        <h3>Structured Data for 1040 Form:</h3>\n                        <pre>{structuredData}</pre>\n                        <button onClick={handleNext}>Continue to 1040 Form</button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default W2UploadPage;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport Header from './Header';\nimport './Fill1040Page.css';\n\nconst Fill1040Page = ({ structuredData }) => {\n    const [loading, setLoading] = useState(false);\n    const [downloadLink, setDownloadLink] = useState(null);\n\n    const fill1040Form = useCallback(async () => {\n        setLoading(true);\n        try {\n            const formUrl = `${process.env.PUBLIC_URL}/assets/f1040.pdf`; // Path to your blank 1040 form PDF\n            const formPdfBytes = await fetch(formUrl).then(res => res.arrayBuffer());\n            const pdfDoc = await PDFDocument.load(formPdfBytes);\n            const form = pdfDoc.getForm();\n\n            // Extract only the Name and SSN from structuredData\n            const { employeeName, ssn } = structuredData;\n\n            // Fill in the First and Last name fields\n            form.getTextField('YourFirstName').setText(employeeName.split(' ')[0] || '');\n            form.getTextField('YourLastName').setText(employeeName.split(' ').slice(1).join(' ') || '');\n\n            // Fill in the SSN field\n            form.getTextField('SSN').setText(ssn || '');\n\n            // Serialize the filled PDF document\n            const pdfBytes = await pdfDoc.save();\n\n            // Create a Blob for downloading the PDF\n            const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n            const link = URL.createObjectURL(blob);\n            setDownloadLink(link);\n\n            setLoading(false);\n        } catch (error) {\n            console.error('Error filling the 1040 form:', error);\n            setLoading(false);\n        }\n    }, [structuredData]);\n\n    useEffect(() => {\n        if (structuredData) {\n            fill1040Form();\n        }\n    }, [structuredData, fill1040Form]);\n\n    return (\n        <div className=\"fill-1040-page\">\n            <Header />\n            <div className=\"fill-1040-container\">\n                <h2>1040 Form Filled</h2>\n                {loading ? (\n                    <p>Filling form, please wait...</p>\n                ) : (\n                    downloadLink && (\n                        <div>\n                            <p>The form has been filled based on your W-2 data.</p>\n                            <a href={downloadLink} download=\"Filled_1040_Form.pdf\" onClick={() => URL.revokeObjectURL(downloadLink)}>\n                                Download your 1040 Form\n                            </a>\n                        </div>\n                    )\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Fill1040Page;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport LoginPage from './components/LoginPage';\nimport HomePage from './components/HomePage';\nimport TaxFilingPage from './components/TaxFilingPage';\nimport TaxComfortPage from './components/TaxComfortPage';\nimport W2UploadPage from './components/W2UploadPage'; // Import the W-2 upload page\nimport Fill1040Page from './components/Fill1040Page'; // Import the Fill 1040 page\n//import { GlobalWorkerOptions } from 'pdfjs-dist/build/pdf';\n\n// Set the workerSrc path for PDF.js\n//GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/4.7.76/pdf.worker.min.js`; // Replace 2.10.377 with your version\n//GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.min.js`;\n\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<LoginPage />} />\n        <Route path=\"/home\" element={<HomePage />} />\n        <Route path=\"/tax-filing\" element={<TaxFilingPage />} />\n        <Route path=\"/comfort\" element={<TaxComfortPage />} />\n        <Route path=\"/w2-upload\" element={<W2UploadPage />} /> {/* W-2 upload page route */}\n        <Route path=\"/fill-1040\" element={<Fill1040Page />} /> {/* Fill 1040 form route */}\n       \n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}